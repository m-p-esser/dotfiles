const n=["ANY_VALUE(expr)\n\nreturns: mixed","_**System Function**_ (⊕ 5.7.5)\n\nSuppress ONLY_FULL_GROUP_BY value rejection"],t=["**CAST**(`expr` AS `type`)\n- `expr` (mixed) => Value to cast\n- `type` (string) => Datatype to cast to\n\nreturns: mixed","_**System Function**_\n\nCast a value as a certain type"],e=["**CONVERT**(`expr`, `type`)\n- `expr` (mixed) => Value to cast\n- `type` (string) => Datatype to cast to\n\n**CONVERT**(`expr` USING `transcoding_name`)\n- `expr` (mixed) => Value to cast\n- `transcoding_name` (string) => Character set to convert to\n\nreturns: mixed","_**System Function**_\n\nCast a value as a certain type"],r=["**ABS**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the absolute value"],s=["**ACOS**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the arc cosine"],i=["**ASIN**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the arc sine"],u=["**ATAN**(`Y`,`X`)\n- `Y` (numeric) => Number\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the arc tangent of the two arguments"],o=["**CEIL**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the smallest integer value not less than the argument"],m=["**CEILING**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the smallest integer value not less than the argument"],_=["**COS**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the cosine"],a=["**COT**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the cotangent"],c=["**CRC32**(`expr`)\n- `expr` (string) => String\n\nreturns: numeric","_**System Function**_\n\nCompute a cyclic redundancy check value"],S=["**DEGREES**(`X`)\n- `X` (numeric) => Radians\n\nreturns: numeric","_**System Function**_\n\nConvert radians to degrees"],g=["**EXP**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nRaise to the power of"],y=["**FLOOR**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the largest integer value not greater than the argument"],T=["**LN**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the natural logarithm of the argument"],E=["**LOG**(`B`)\n- `B` (numeric) => Number\n\n**LOG**(`B`,`X`)\n- `B` (numeric) => Number\n- `X` (numeric) => Base\n\nreturns: numeric","_**System Function**_\n\nReturn the natural logarithm of the first argument"],R=["**LOG2**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the base-2 logarithm of the argument"],d=["**LOG10**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the base-10 logarithm of the argument"],F=["**MOD**(`N`,`M`)\n- `N` (numeric) => Dividend\n- `M` (numeric) => Divisor\n\nreturns: numeric","_**System Function**_\n\nReturn the remainder"],l=["**PI**()\n\nreturns: numeric","_**System Function**_\n\nReturn the value of pi"],N=["**POW**(`X`,`Y`)\n- `X` (numeric) => Number\n- `Y` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the argument raised to the specified power"],h=["**POWER**(`X`,`Y`)\n- `X` (numeric) => Number\n- `Y` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the argument raised to the specified power"],p=["**RADIANS**(`X`)\n- `X` (numeric) => Degrees\n\nreturns: numeric","_**System Function**_\n\nReturn argument converted to radians"],f=["**RAND**([`N`])\n- `N` (numeric) => Seed value\n\nreturns: numeric","_**System Function**_\n\nReturn a random floating-point value"],A=["**RANDOM_BYTES**([`len`])\n- `len` (numeric) => Length of return value\n\nreturns: numeric","_**System Function**_ (⊕ 5.7.4)\n\nReturn a random byte vector"],I=["**ROUND**(`X`)\n- `X` (numeric) => Number\n\n**ROUND**(`X`,`D`)\n- `X` (numeric) => Number\n- `D` (numeric) => Number of decimal places\n\nreturns: numeric","_**System Function**_\n\nRound the argument"],O=["**SIGN**(`X`)\n- `X` (numeric) => Number\n\nreturns: string","_**System Function**_\n\nReturn the sign of the argument"],D=["**SIN**(`X`)\n- `X` (numeric) => Radians\n\nreturns: numeric","_**System Function**_\n\nReturn the sine of the argument"],C=["**SQRT**(`X`)\n- `X` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the square root of the argument"],M=["**TAN**(`X`)\n- `X` (numeric) => Radians\n\nreturns: numeric","_**System Function**_\n\nReturn the tangent of the argument"],x=["**TRUNCATE**(`X`,`D`)\n- `X` (numeric) => Number\n- `D` (numeric) => Number of decimal places\n\nreturns: numeric","_**System Function**_\n\nTruncate to specified number of decimal places"],L=["**ADDDATE**(`date`,INTERVAL `expr` `unit`)\n- `date` (date) => Initial date\n- `expr` (numeric) => Amount to add\n- `unit` (string) => Unit\n\n**ADDDATE**(`expr`,`days`)\n- `expr` (date) => Initial date\n- `days` (numeric) => Units in Days\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nAdd time values (intervals) to a date value"],P=["**ADDTIME**(`expr1`,`expr2`)\n- `expr1` (datetime) => Date or time\n- `expr2` (time) => Time\n\nreturns: time","_**System Function**_ (⊕ 4.1.1)\n\nAdd time"],b=["**CONVERT_TZ**(`dt`,`from_tz`,`to_tz`)\n- `dt` (datetime) => Date\n- `from_tz` (string) => From time zone\n- `to_tz` (string) => To time zone\n\nreturns: datetime","_**System Function**_ (⊕ 4.1.3)\n\nConvert from one time zone to another"],v=["**CURDATE**()\n\nreturns: datetime","_**System Function**_\n\nReturn the current date"],U=["**CURRENT_DATE**()\n\nreturns: datetime","_**System Function**_\n\nSynonyms for CURDATE()"],W=["**CURTIME**()\n\nreturns: time","_**System Function**_\n\nReturn the current time"],G=["returns: string","_**System Function**_\n\nReturn the current active roles"],B=["**CURRENT_TIME**()\n\nreturns: time","_**System Function**_\n\nSynonyms for CURTIME()"],Y=["**CURRENT_TIMESTAMP**()\n\nreturns: datetime","_**System Function**_\n\nSynonyms for NOW()"],X=["**DATE**(`expr`)\n- `expr` (datetime) => Date\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nExtract the date part of a date or datetime expression"],w=["**DATEDIFF**(`expr1`,`expr2`)\n- `expr1` (datetime) => Minuend\n- `expr2` (datetime) => Subtrahend\n\nreturns: days","_**System Function**_ (⊕ 4.1.1)\n\nSubtract two dates"],K=["**DATE_ADD**(`date`,INTERVAL `expr` `unit`)\n- `date` (date) => Date\n- `expr` (numeric) => Amount to be added\n- `unit` (string) => Unit\n\nreturns: date","_**System Function**_\n\nAdd time values (intervals) to a date value"],H=["**DATE_SUB**(`date`,INTERVAL `expr` `unit`)\n- `date` (date) => Date\n- `expr` (numeric) => Amount to be subtracted\n- `unit` (string) => Unit\n\nreturns: date","_**System Function**_\n\nSubtract a time value (interval) from a date"],V=["**DATE_FORMAT**(`date`,`format`)\n- `date` (date) => Date\n- `format` (string) => Format specifier\n- `format` (string) => Locale\n\nreturns: date","_**System Function**_\n\nFormat date as specified"],J=["**DAY**(`date`)\n- `date` (date) => Date\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nSynonym for DAYOFMONTH()"],k=["**DAYNAME**(`date`)\n- `date` (date) => Date\n\nreturns: string","_**System Function**_ (⊕ 4.1.21)\n\nReturn the name of the weekday"],j=["**DAYOFMONTH**(`date`)\n- `date` (numeric) => Number\n\nreturns: string","_**System Function**_\n\nReturn the day of the month (0-31)"],Q=["**DAYOFWEEK**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the weekday index of the argument"],q=["**DAYOFYEAR**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the day of the year (1-366)"],z=["**EXTRACT**(`unit` FROM `date`)\n- `unit` (string) => Unit specifier\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nExtract part of a date"],Z=["returns: string","_**System Function**_ (⊕ 5.6.1)\n\nDecode base64 encoded string and return result"],$=["**FROM_DAYS**(`N`)\n- `N` (numeric) => Number\n\nreturns: date","_**System Function**_\n\nConvert a day number to a date"],nn=["**FROM_UNIXTIME**(`unix_timestamp`)\n- `unix_timestamp` (numeric) => Number\n\n**FROM_UNIXTIME**(`unix_timestamp`, `format`)\n- `unix_timestamp` (numeric) => Number\n- `format` (string) => Format specifier\n\nreturns: date","_**System Function**_\n\nFormat Unix timestamp as a date"],tn=["**GET_FORMAT**(DATE|TIME|DATETIME, 'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL')\n- `expr` (numeric) => Type specifier\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nReturn a date format string"],en=["**GTID_SUBSET**(`subset`, `set`)\n- `subset` (string) => Set of GTIDs\n- `set` (string) => Set of GTIDs\n\nreturns: string","_**System Function**_ (⊕ 5.6.5)\n\nReturn true if all GTIDs in subset are also in set; otherwise false."],rn=["**GTID_SUBTRACT**(`set`, `subset`)\n- `set` (string) => Set of GTIDs\n- `subset` (string) => Set of GTIDs\n\nreturns: string","_**System Function**_ (⊕ 5.6.5)\n\nReturn all GTIDs in set that are not in subset."],sn=["**HOUR**(`time`)\n- `time` (time) => Time\n\nreturns: numeric","_**System Function**_\n\nExtract the hour"],un=["**LAST_DAY**(`date`)\n- `date` (datetime) => Date\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nReturn the last day of the month for the argument"],on=["**LOCALTIME**()\n\nreturns: datetime","_**System Function**_\n\nSynonym for NOW()"],mn=["**LOCALTIMESTAMP**()\n\nreturns: datetime","_**System Function**_ (⊕ 4.0.6)\n\nSynonym for NOW()"],_n=["**MAKEDATE**(`year`,`dayofyear`)\n- `year` (numeric) => Year\n- `dayofyear` (numeric) => Day of year\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nCreate a date from the year and day of year"],an=["**MAKETIME**(`hour`, `minute`,`second`)\n- `hour` (numeric) => Hour\n- `minute` (numeric) => Minute\n- `second` (numeric) => Second\n\nreturns: time","_**System Function**_ (⊕ 4.1.1)\n\nCreate time from hour, minute, second"],cn=["**MICROSECOND**(`expr`)\n- `expr` (datetime) => Date\n\nreturns: numeric","_**System Function**_ (⊕ 4.1.1)\n\nReturn the microseconds from argument"],Sn=["**MINUTE**(`time`)\n- `time` (datetime) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the minute from the argument"],gn=["**MONTH**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the month from the date passed"],yn=["**MONTHNAME**(`date`)\n- `date` (date) => Date\n\nreturns: string","_**System Function**_ (⊕ 4.1.21)\n\nReturn the name of the month"],Tn=["**NOW**()\n\nreturns: datetime","_**System Function**_\n\nReturn the current date and time"],En=["**PERIOD_ADD**(`P`,`N`)\n- `P` (numeric) => Format period YYMM or YYYYMM\n- `N` (numeric) => Number of months\n\nreturns: string","_**System Function**_\n\nAdd a period to a year-month"],Rn=["**PERIOD_DIFF**(`P1`,`P2`)\n- `P1` (numeric) => Format period YYMM or YYYYMM\n- `P2` (numeric) => Format period YYMM or YYYYMM\n\nreturns: numeric","_**System Function**_\n\nReturn the number of months between periods"],dn=["**QUARTER**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the quarter from a date argument"],Fn=["**SECOND**(`time`)\n- `time` (datetime) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the second (0-59)"],ln=["**SEC_TO_TIME**(`seconds`)\n- `seconds` (numeric) => Number\n\nreturns: time","_**System Function**_\n\nConverts seconds to 'hh:mm:ss' format"],Nn=["**STR_TO_DATE**(`str`,`format`)\n- `str` (string) => String\n- `format` (string) => Format string\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nConvert a string to a date"],hn=["**SUBDATE**(`date`,INTERVAL `expr` `unit`)\n- `date` (date) => Date\n- `expr` (numeric) => Number\n- `unit` (string) => Unit of time\n\n**SUBDATE**(`expr`,`days`)\n- `expr` (date) => Date\n- `days` (numeric) => Number of days\n\nreturns: numeric","_**System Function**_\n\nSynonym for DATE_SUB() when invoked with three arguments"],pn=["**SUBTIME**(`expr1`,`expr2`)\n- `expr1` (datetime) => Date\n- `expr2` (datetime) => Date\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nSubtract times"],fn=["**SYSDATE**()\n\nreturns: mixed","_**System Function**_\n\nReturn the time at which the function executes"],An=["**TIME**(`expr`)\n- `expr` (datetime) => Date\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nExtract the time portion of the expression passed"],In=["**TIMEDIFF**(`expr1`,`expr2`)\n- `expr1` (datetime) => Properly formatted string\n- `expr2` (datetime) => Properly formatted string\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nSubtract time"],On=["**TIMESTAMP**(`expr1`,`expr2`)\n- `expr1` (datetime) => Date\n- `expr2` (datetime) => Date\n\n**TIMESTAMP**(`expr`)\n- `expr` (string) => String\n\nreturns: datetime","_**System Function**_ (⊕ 4.1.1)\n\nWith a single argument, this function returns the date or datetime expression; with two arguments, the sum of the arguments"],Dn=["**TIMESTAMPADD**(`unit`, `interval`,`datetime_expr`)\n- `unit` (string) => Time unit\n- `interval` (numeric) => Number of units\n- `datetime_expr` (datetime) => Date\n\nreturns: numeric","_**System Function**_\n\nAdd an interval to a datetime expression"],Cn=["**TIMESTAMPDIFF**(`unit`,`datetime_expr1`, `datetime_expr2`)\n- `unit` (string) => Time unit\n- `datetime_expr1` (date) => Date subtrahend\n- `datetime_expr2` (date) => Date minuend\n\nreturns: numeric","_**System Function**_\n\nSubtract an interval from a datetime expression"],Mn=["**TIME_FORMAT**(`time`,`format`)\n- `time` (time) => Time\n- `format` (string) => Properly formatted string\n\nreturns: time","_**System Function**_\n\nFormat as time"],xn=["**TIME_TO_SEC**(`time`)\n- `time` (datetime) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the argument converted to seconds"],Ln=["returns: string","_**System Function**_ (⊕ 5.6.1)\n\nReturn the argument converted to a base-64 string"],Pn=["**TO_DAYS**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the date argument converted to days"],bn=["**TO_SECONDS**(`datetime`)\n- `datetime` (datetime) => Datetime\n\nreturns: numeric","_**System Function**_ (⊕ 6.0.14)\n\nReturn the date or datetime argument converted to seconds since Year 0"],vn=["**UNIX_TIMESTAMP**([`date`])\n- `date` (datetime) => Date\n\nreturns: datetime","_**System Function**_\n\nReturn a Unix timestamp"],Un=["**UTC_DATE**()\n\nreturns: date","_**System Function**_ (⊕ 4.1.1)\n\nReturn the current UTC date"],Wn=["**UTC_TIME**()\n\nreturns: time","_**System Function**_ (⊕ 4.1.1)\n\nReturn the current UTC time"],Gn=["**UTC_TIMESTAMP**()\n\nreturns: datetime","_**System Function**_ (⊕ 4.1.1)\n\nReturn the current UTC date and time"],Bn=["**WEEK**(`date`[,`mode`])\n- `expr` (date) => Date\n- `mode` (numeric) => Week start indicator\n\nreturns: numeric","_**System Function**_\n\nReturn the week number"],Yn=["**WEEKDAY**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the weekday index"],Xn=["**WEEKOFYEAR**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_ (⊕ 4.1.1)\n\nReturn the calendar week of the date (1-53)"],wn=["**YEAR**(`date`)\n- `date` (date) => Date\n\nreturns: numeric","_**System Function**_\n\nReturn the year"],Kn=["**YEARWEEK**(`date`,[`mode`])\n- `date` (string) => Properly formatted string\n- `mode` (numeric) => Week start indicator\n\nreturns: numeric","_**System Function**_\n\nReturn the year and week"],Hn=["**BIT_COUNT**(`N`)\n- `N` (numeric) => Expression\n\nreturns: numeric","_**System Function**_\n\nReturn the number of bits that are set"],Vn=["**AES_ENCRYPT**(`str`,`key_str`[,`init_vector`])\n- `str` (string) => String to be encrypted\n- `key_str` (string) => Key\n- `init_vector` (string) => Initialization vector\n\nreturns: string","_**System Function**_\n\nEncrypt using AES"],Jn=["**AES_DECRYPT**(`crypt_str`,`key_str`[,`init_vector`])\n- `crypt_str` (string) => To be decrypted\n- `key_str` (string) => Key\n- `init_vector` (string) => Initialization vector\n\nreturns: string","_**System Function**_\n\nDecrypt using AES"],kn=["**COMPRESS**(`string_to_compress`)\n- `string_to_compress` (string) => String to be compressed\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nReturn result as a binary string"],jn=["**DECODE**(`crypt_str`,`pass_str`)\n- `crypt_str` (string) => String to be decoded\n- `pass_str` (string) => Password string\n\nreturns: string","_**System Function**_ (⊘ 5.7.2, ⊗ 8.0.3)\n\nDecode a string encrypted using ENCODE()"],Qn=["**ENCODE**(`str`,`pass_str`)\n- `str` (string) => String to be encoded\n- `pass_str` (string) => Password string\n\nreturns: string","_**System Function**_ (⊘ 5.7.2, ⊗ 8.0.3)\n\nEncode a string"],qn=["**DES_DECRYPT**(`crypt_str`[,`key_str`)\n- `crypt_str` (string) => Encrypted string\n- `key_str` (string) => Key string\n\nreturns: string","_**System Function**_ (⊘ 5.7.6, ⊗ 8.0.3)\n\nDecrypt a string"],zn=["**DES_ENCRYPT**(`str`[, {`key_num`|`key_str`}])\n- `str` (string) => String to be encrypted\n- `key_num` (numeric) => Key number for encryption\n- `key_str` (string) => String used for encryption\n\nreturns: string","_**System Function**_ (⊘ 5.7.6, ⊗ 8.0.3)\n\nEncrypt a string"],Zn=["**ENCRYPT**(`str`[,`salt`])\n- `str` (string) => String to be encrypted\n- `salt` (mixed) => Key\n\nreturns: string","_**System Function**_ (⊘ 5.7.6, ⊗ 8.0.3)\n\nEncrypt a string"],$n=["**MD5**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nCalculate MD5 checksum"],nt=["**OLD_PASSWORD**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊕ 4.1.1, ⊘ 5.6.5, ⊗ 5.7.5)\n\nReturn the value of the pre-4.1 implementation of PASSWORD"],tt=["**PASSWORD**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊘ 5.7.6, ⊗ 8.0.11)\n\nCalculate and return a password string"],et=["**SHA**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nCalculate an SHA-1 160-bit checksum"],rt=["**SHA2**(`str`, `hash_length`)\n- `str` (string) => String\n- `hash_length` (numeric) => Number\n\nreturns: string","_**System Function**_ (⊕ 6.0.5)\n\nCalculate an SHA-2 checksum"],st=["**UNCOMPRESS**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nUncompress a string compressed"],it=["**UNCOMPRESSED_LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊕ 4.1.1)\n\nReturn the length of a string before compression"],ut=["**BENCHMARK**(`count`,`expr`)\n- `count` (numeric) => Number of times\n- `expr` (string) => Expression to be executed\n\nreturns: numeric","_**System Function**_\n\nRepeatedly execute an expression"],ot=["**CHARSET**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn the character set of the argument"],mt=["**COERCIBILITY**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_ (⊕ 4.1.1)\n\nReturn the collation coercibility value of the string argument"],_t=["**COLLATION**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn the collation of the string argument"],at=["**CONNECTION_ID**()\n\nreturns: numeric","_**System Function**_\n\nReturn the connection ID (thread ID) for the connection"],ct=["**CURRENT_USER**()\n\nreturns: string","_**System Function**_\n\nThe authenticated user name and host name"],St=["**DATABASE**()\n\nreturns: string","_**System Function**_\n\nReturn the default (current) database name"],gt=["**FOUND_ROWS**()\n\nreturns: numeric","_**System Function**_\n\nFor a SELECT with a LIMIT clause, the number of rows that would be returned were there no LIMIT clause"],yt=["**LAST_INSERT_ID**()\n\nreturns: numeric","_**System Function**_\n\nValue of the AUTOINCREMENT column for the last INSERT"],Tt=["returns: string","_**System Function**_\n\nReturn a GraphML document representing memory role subgraphs"],Et=["**ROW_COUNT**()\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.1)\n\nThe number of rows updated"],Rt=["**SCHEMA**()\n\nreturns: string","_**System Function**_ (⊕ 5.0.2)\n\nSynonym for DATABASE()"],dt=["**SESSION_USER**()\n\nreturns: string","_**System Function**_\n\nSynonym for USER()"],Ft=["**SYSTEM_USER**()\n\nreturns: string","_**System Function**_\n\nSynonym for USER()"],lt=["**USER**()\n\nreturns: string","_**System Function**_\n\nThe user name and host name provided by the client"],Nt=["**DEFAULT**(`col_name`)\n- `col_name` (string) => Column Name\n\nreturns: mixed","_**System Function**_\n\nReturn the default value for a table column"],ht=["**FORMAT**(`X`,`D`)\n- `X` (numeric) => Number\n- `D` (numeric) => Number of decimal places\n\nreturns: string","_**System Function**_\n\nReturn a number formatted to specified number of decimal places"],pt=["**GET_LOCK**(`str`,`timeout`)\n- `str` (string) => Lock name\n- `timeout` (numeric) => Seconds\n\nreturns: bool","_**System Function**_\n\nGet a named lock"],ft=["**INET_ATON**(`expr`)\n- `expr` (string) => IP address\n\nreturns: numeric","_**System Function**_\n\nReturn the numeric value of an IP address"],At=["**INET_NTOA**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: string","_**System Function**_\n\nReturn the IP address from a numeric value"],It=["**INET6_ATON**(`expr`)\n- `expr` (string) => IPv6 address\n\nreturns: numeric","_**System Function**_ (⊕ 5.6.3)\n\nReturn the numeric value of an IPv6 address"],Ot=["**INET6_NTOA**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: string","_**System Function**_ (⊕ 5.6.3)\n\nReturn the IPv6 address from a numeric value"],Dt=["**IS_FREE_LOCK**(`str`)\n- `str` (numeric) => Lock name\n\nreturns: bool","_**System Function**_\n\nWhether the named lock is free"],Ct=["**IS_IPV4**(`expr`)\n- `expr` (string) => IPv4 address\n\nreturns: numeric","_**System Function**_ (⊕ 5.6.3)\n\nWhether argument is an IPv4 address"],Mt=["**IS_IPV4_COMPAT**(`expr`)\n- `expr` (string) => IPv4-compatible address\n\nreturns: numeric","_**System Function**_ (⊕ 5.6.3)\n\nWhether argument is an IPv4-compatible address"],xt=["**IS_IPV4_MAPPED**(`expr`)\n- `expr` (string) => IPv4-mapped address\n\nreturns: numeric","_**System Function**_ (⊕ 5.6.3)\n\nWhether argument is an IPv4-mapped address"],Lt=["**IS_IPV6**(`expr`)\n- `expr` (string) => IPv6 address\n\nreturns: numeric","_**System Function**_ (⊕ 5.6.3)\n\nWhether argument is an IPv6 address"],Pt=["**IS_USED_LOCK**(`str`)\n- `str` (string) => Lock name\n\nreturns: string","_**System Function**_\n\nWhether the named lock is in use; return connection identifier if true"],bt=["**MASTER_POS_WAIT**(`log_name`,`log_pos` [,`timeout`)\n- `log_name` (string) => Log name\n- `log_pos` (numeric) => Position\n- `timeout` (numeric) => Timeout\n\nreturns: mixed","_**System Function**_\n\nBlock until the slave has read and applied all updates up to the specified position"],vt=["**NAME_CONST**(`name`,`value`)\n- `name` (string) => Column Name\n- `value` (mixed) => Value\n\nreturns: mixed","_**System Function**_ (⊕ 5.0.12)\n\nCause the column to have the given name"],Ut=["returns: integer","_**System Function**_ (⊕ 5.7.5)\n\nRelease all current named locks"],Wt=["**RELEASE_LOCK**(`str`)\n- `str` (string) => Lock name\n\nreturns: bool","_**System Function**_\n\nRelease the named lock"],Gt=["**SLEEP**(`duration`)\n- `duration` (numeric) => Seconds\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.12)\n\nSleep for a number of seconds"],Bt=["**UUID**()\n\nreturns: string","_**System Function**_ (⊕ 4.1.2)\n\nReturn a Universal Unique Identifier (UUID)"],Yt=["**UUID_SHORT**()\n\nreturns: numeric","_**System Function**_ (⊕ 5.1.20)\n\nReturn an integer-valued universal identifier"],Xt=["returns: string","_**System Function**_\n\nConvert binary UUID to string"],wt=["returns: boolean","_**System Function**_\n\nWhether argument is a valid UUID"],Kt=["returns: binary","_**System Function**_\n\nConvert string UUID to binary"],Ht=["**VALUES**(`col_name`)\n- `col_name` (string) => Column name\n\nreturns: mixed","_**System Function**_ (⊕ 4.1.1)\n\nDefine the values to be used during an INSERT"],Vt=["**AVG**([DISTINCT] `expr`)\n- `expr` (mixed) => Expression\n\nreturns: numeric","_**System Function**_\n\nReturn the average value of the argument"],Jt=["**BIT_AND**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn bitwise AND"],kt=["**BIT_OR**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn bitwise OR"],jt=["**BIT_XOR**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_ (⊕ 4.1.1)\n\nReturn bitwise XOR"],Qt=["**COUNT**(* | [DISTINCT] `expr`,[`expr`...])\n- `*` => record count\n- `expr` (mixed) => Expression\n\nreturns: numeric","_**System Function**_\n\nReturn the count of a number of different values"],qt=["**GROUP_CONCAT**([DISTINCT] `expr` [,`expr` ...])\n- `expr` (mixed) => Expression\n\nreturns: string","_**System Function**_\n\nReturn a concatenated string"],zt=["**MIN**([DISTINCT] `expr`)\n- `expr` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nReturn the minimum value"],Zt=["**MAX**([DISTINCT] `expr`)\n- `expr` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nReturn the maximum value"],$t=["**STD**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the population standard deviation"],ne=["**STDDEV**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the population standard deviation"],te=["**STDDEV_POP**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.3)\n\nReturn the population standard deviation"],ee=["**STDDEV_SAMP**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.3)\n\nReturn the sample standard deviation"],re=["**SUM**([DISTINCT] `expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the sum"],se=["**VAR_POP**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.3)\n\nReturn the population standard variance"],ie=["**VAR_SAMP**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_ (⊕ 5.0.3)\n\nReturn the sample variance"],ue=["**VARIANCE**(`expr`)\n- `expr` (numeric) => Number\n\nreturns: numeric","_**System Function**_\n\nReturn the population standard variance"],oe=["**IF**(`expr1`,`expr2`,`expr3`)\n- `expr1` (mixed) => Test\n- `expr2` (mixed) => True return value\n- `expr3` (mixed) => False return value\n\nreturns: mixed","_**System Function**_\n\nIf/else construct"],me=["**IFNULL**(`expr1`,`expr2`)\n- `expr1` (mixed) => Returned if expr1 is not null\n- `expr2` (mixed) => Returned if expr1 is null\n\nreturns: mixed","_**System Function**_\n\nNull if/else construct"],_e=["**NULLIF**(`expr1`,`expr2`)\n- `expr1` (mixed) => Expression\n- `expr2` (mixed) => Returned if expr1 != expr2\n\nreturns: mixed","_**System Function**_\n\nReturn NULL if expr1 = expr2"],ae=["**ASCII**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nReturn numeric value of left-most character"],ce=["**BIN**(`N`)\n- `N` (numeric) => Number\n\nreturns: string","_**System Function**_\n\nReturn a string containing binary representation of a number"],Se=["**BIT_LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nReturn length of argument in bits"],ge=["**CHAR**(`N`,... [USING `charset_name`])\n- `N` (numeric) => Number\n- `charset_name` (string) => Character set name\n\nreturns: string","_**System Function**_\n\nReturn the character for each integer passed"],ye=["**CHAR_LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nReturn number of characters in argument"],Te=["**CHARACTER_LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nSynonym for CHAR_LENGTH()"],Ee=["**CONCAT**(`str1`, `str2`,...)\n- `str1` (string) => String\n- `str2` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn concatenated string"],Re=["**CONCAT_WS**(`separator`, `str1`,`str2`,...)\n- `str1` (string) => Separator\n- `str2` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn concatenate with separator"],de=["**CONV**(`N`,`from_base`, `to_base`)\n- `N` (mixed) => Expression\n- `from_base` (numeric) => From base\n- `to_base` (numeric) => To base\n\nreturns: string","_**System Function**_\n\nConvert numbers between different number bases"],Fe=["**ELT**(`N`,`str1`, `str2`,`str3`,...)\n- `N` (numeric) => One-based index number\n- `str1` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn string at index number"],le=["**EXPORT_SET**(`bits`,`on`,`off` [,`separator`[,`number_of_bits`]])\n- `bits` (numeric) => Bit value\n- `on` (string) => On indicator\n- `off` (string) => Off indicator\n- `separator` (string) => Separator\n- `number_of_bits` (numeric) => Number of bits\n\nreturns: string","_**System Function**_\n\nReturn a string such that for every bit set in the value bits, you get an on string and for every unset bit, you get an off string"],Ne=["**FIELD**(`index_str`,`str1`,`str2`, `str3`,...)\n- `index_str` (string) => Value to search for\n- `str1` (string) => To be searched\n- `str2` (string) => To be searched\n- `str3` (string) => To be searched\n\nreturns: numeric","_**System Function**_\n\nIndex (position) of first argument in subsequent arguments"],he=["**FIND_IN_SET**(`str`,`strlist`)\n- `str` (string) => String\n- `strlist` (string) => Comma separated strings\n\nreturns: numeric","_**System Function**_\n\nIndex (position) of first argument within second argument"],pe=["**HEX**(`N_or_S`)\n- `N_or_S` (mixed) => Expression\n\nreturns: string","_**System Function**_\n\nHexadecimal representation of decimal or string value"],fe=["**INSERT**(`str`,`pos`,`len`,`newstr`)\n- `str` (string) => Original string\n- `pos` (numeric) => Insert at\n- `len` (numeric) => Number of characters\n- `newstr` (string) => Inserted string\n\nreturns: string","_**System Function**_\n\nInsert substring at specified position up to specified number of characters"],Ae=["**INSTR**(`str`,`substr`)\n- `str` (string) => To be searched\n- `substr` (string) => Value to search for\n\nreturns: numeric","_**System Function**_\n\nReturn the index of the first occurrence of substring"],Ie=["**LCASE**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nSynonym for LOWER()"],Oe=["**LEFT**(`str`,`len`)\n- `str` (string) => String\n- `len` (numeric) => Number of characters\n\nreturns: numeric","_**System Function**_\n\nReturn the leftmost number of characters as specified"],De=["**LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nReturn the length of a string in bytes"],Ce=["**LOAD_FILE**(`file_name`)\n- `str` (string) => File name\n\nreturns: undefined","_**System Function**_\n\nLoad the named file"],Me=["**VERSION**()\n\nreturns: string","_**System Function**_\n\nReturn a string that indicates the MySQL server version"],xe=["**LOCATE**(`substr`,`str`, `pos`)\n- `substr` (string) => Value to search for\n- `str` (string) => To be searched\n- `pos` (numeric) => Start position\n\n**LOCATE**(`substr`,`str`)\n- `substr` (string) => Value to search for\n- `str` (string) => To be searched\n\nreturns: numeric","_**System Function**_\n\nReturn the position of the first occurrence of substring"],Le=["**LOWER**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn the argument in lowercase"],Pe=["**LPAD**(`str`,`len`, `padstr`)\n- `str` (string) => String\n- `len` (numeric) => Number of characters to pad\n- `padstr` (string) => Pad string\n\nreturns: string","_**System Function**_\n\nReturn the string argument, left-padded with the specified string"],be=["**LTRIM**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nRemove leading spaces"],ve=["**MAKE_SET**(`bits`, `str1`,`str2`,...)\n- `bits` (numeric) => Bits set\n- `str1` (string) => String\n- `str2` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn a set of comma-separated strings that have the corresponding bit in bits set"],Ue=["**MID**(`str`,`pos`, `len`)\n- `str` (string) => String\n- `pos` (numeric) => Start position\n- `len` (numeric) => Number of characters\n\nreturns: string","_**System Function**_\n\nReturn a substring starting from the specified position"],We=["**OCT**(`N`)\n- `N` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn a string containing octal representation of a number"],Ge=["**OCTET_LENGTH**(`str`)\n- `str` (string) => String\n\nreturns: numeric","_**System Function**_\n\nSynonym for LENGTH()"],Be=["**ORD**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn character code for leftmost character of the argument"],Ye=["**POSITION**(`substr` IN `str`)\n- `substr` (string) => Value to search for\n- `str` (string) => To be searched\n\nreturns: numeric","_**System Function**_\n\nSynonym for LOCATE()"],Xe=["**QUOTE**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nEscape the argument for use in an SQL statement"],we=["**REPEAT**(`str`,`count`)\n- `str` (string) => String\n- `count` (string) => Number of times\n\nreturns: string","_**System Function**_\n\nRepeat a string the specified number of times"],Ke=["**REPLACE**(REPLACE(`str`,`from_str`, `to_str`)\n- `str` (string) => String\n- `from_str` (string) => From string\n- `to_str` (string) => To string\n\nreturns: string","_**System Function**_\n\nReplace occurrences of a specified string"],He=["**REVERSE**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReverse the characters in a string"],Ve=["**RIGHT**(`str`,`len`)\n- `str` (string) => String\n- `len` (numeric) => Number of characters\n\nreturns: string","_**System Function**_\n\nReturn the specified rightmost number of characters"],Je=["**RPAD**(`str`, `len`,`padstr`)\n- `str` (string) => String\n- `len` (numeric) => Number of characters\n- `padstr` (string) => Pad string\n\nreturns: string","_**System Function**_\n\nAppend string the specified number of times"],ke=["**RTRIM**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nRemove trailing spaces"],je=["**SOUNDEX**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nReturn a soundex string"],Qe=["**SPACE**(SPACE(`N`)\n- `str` (numeric) => Number\n\nreturns: string","_**System Function**_\n\nReturn a string of the specified number of spaces"],qe=["**SUBSTR**(`str`,`pos`)\n- `str` (string) => String\n- `pos` (numeric) => Start position\n\n**SUBSTR**(`str` FROM `pos`)\n- `str` (string) => String\n- `pos` (string) => Start position\n\n**SUBSTR**(`str`, `pos`,`len`)\n- `str` (string) => String\n- `pos` (string) => Start position\n- `len` (string) => Number of characters\n\n**SUBSTR**(`str` FROM `pos` FOR `len`)\n- `str` (string) => String\n- `pos` (numeric) => Start position\n- `len` (numeric) => Number of characters\n\nreturns: string","_**System Function**_\n\nReturn the substring as specified"],ze=["**SUBSTRING**(`str`,`pos`)\n- `str` (string) => String\n- `pos` (numeric) => Start position\n\n**SUBSTRING**(`str` FROM `pos`)\n- `str` (string) => String\n- `pos` (string) => Start position\n\n**SUBSTRING**(`str`, `pos`,`len`)\n- `str` (string) => String\n- `pos` (string) => Start position\n- `len` (string) => Number of characters\n\n**SUBSTRING**(`str` FROM `pos` FOR `len`)\n- `str` (string) => String\n- `pos` (numeric) => Start position\n- `len` (numeric) => Number of characters\n\nreturns: string","_**System Function**_\n\nReturn the substring as specified"],Ze=["**SUBSTRING_INDEX**(`str`,`delim`, `count`)\n- `str` (string) => String\n- `delim` (numeric) => Delimiter\n- `count` (numeric) => Count\n\nreturns: string","_**System Function**_\n\nReturn a substring from a string before the specified number of occurrences of the delimiter"],$e=["**TRIM**([{BOTH | LEADING | TRAILING} [`remstr`] FROM] `str`)\n- `remstr` (string) => Character to be removed\n- `str` (string) => String from which to remove characters\n\n**TRIM**([`remstr` FROM] `str`)\n- `remstr` (string) => Character to be removed\n- `str` (string) => String from which to remove characters\n\nreturns: string","_**System Function**_\n\nRemove leading and trailing spaces"],nr=["**UCASE**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nSynonym for UPPER()"],tr=["**UNHEX**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊕ 4.1.2)\n\nReturn a string containing hex representation of a number"],er=["**UPPER**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_\n\nConvert to uppercase"],rr=["**STRCMP**(`expr1`,`expr2`)\n- `expr1` (string) => String\n- `expr2` (string) => String\n\nreturns: numeric","_**System Function**_\n\nCompare two strings"],sr=["**MATCH**(MATCH (`col1`, `col2`, ... AGAINST( `expr` [`search_modifier`]))\n- `col1` (string) => String\n- `search_modifier` (string) => String\n\nreturns: string","_**System Function**_\n\nPerform full-text search"],ir=["**GREATEST**(`value1`,`value2`,...)\n- `value1` (mixed) => Expression\n- `value2` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nReturn the largest argument"],ur=["**ISNULL**(`expr`)\n- `expr` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nTest whether the argument is NULL"],or=["**INTERVAL**(`N`,`N1`, `N2`,`N3`,...)\n- `N` (numeric) => Value to find\n- `N1` (numeric) => Value searched\n- `N2` (numeric) => Value searched\n\nreturns: numeric","_**System Function**_\n\nReturn the index of the argument that is less than the first argument"],mr=["**LEAST**(`value1`, `value2`,...)\n- `value1` (mixed) => Expression\n- `value2` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nReturn the smallest argument"],_r=["**COALESCE**(`value1`, `value2`,...)\n- `value1` (mixed) => Expression\n- `value2` (mixed) => Expression\n\nreturns: mixed","_**System Function**_\n\nReturn the first non-NULL argument"],ar=["returns: integer","_**System Function**_ (⊕ 8.0.4)\n\nStarting index of substring matching regular expression"],cr=["returns: integer","_**System Function**_ (⊕ 8.0.4)\n\nWhether string matches regular expression"],Sr=["returns: string","_**System Function**_ (⊕ 8.0.4)\n\nReplace substrings matching regular expression"],gr=["returns: string","_**System Function**_ (⊕ 8.0.4)\n\nReturn substring matching regular expression"],yr=["**WEIGHT_STRING**(`str` [AS {CHAR|BINARY|(N)] [LEVEL `levels`] [`flags`] (`value`,...))\n- `str` (string) => Input string\n- `levels` (mixed) => Collation levels\n- `flags` (mixed) => Flags\n\nreturns: string","_**System Function**_ (⊕ 5.2.4)\n\nReturn the weight string for a string"],Tr=["**VALIDATE_PASSWORD_STRENGTH**(`str`)\n- `str` (string) => String\n\nreturns: string","_**System Function**_ (⊕ 5.6.6)\n\nDetermine strength of password"],Er=["**SQL_THREAD_WAIT_AFTER_GTIDS**(`gtid_set`[, `timeout`])\n- `gtid_set` (string) => GTID set identifier\n- `timeout` (number) => Timeout\n\nreturns: number","_**System Function**_ (⊕ 5.6.5, ⊘ 5.6.9)\n\nObsolete. Use `WAIT_FOR_EXECUTED_GTID_SET()`."],Rr=["**WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS**(`gtid_set`[, `timeout`])\n- `gtid_set` (string) => GTID set identifier\n- `timeout` (number) => Timeout\n- `channel` (number) => Channel\n\nreturns: number","_**System Function**_ (⊕ 5.6.9, ⊘ 8.0.18)\n\nUse `WAIT_FOR_EXECUTED_GTID_SET()`."],dr=["**WAIT_FOR_EXECUTED_GTID_SET**(`gtid_set`[, `timeout`])\n- `gtid_set` (string) => GTID set identifier\n- `timeout` (number) => Timeout\n\nreturns: number","_**System Function**_ (⊕ 5.7.5)\n\nWait until the given GTIDs have executed on the slave."],Fr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn Polygon or MultiPolygon area"],lr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn Polygon or MultiPolygon area"],Nr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConvert from internal geometry format to WKB"],hr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConvert from internal geometry format to WKB"],pr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConvert from internal geometry format to WKT"],fr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConvert from internal geometry format to WKT"],Ar=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn centroid as a point"],Ir=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn centroid as a point"],Or=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBR of one geometry contains MBR of another"],Dr=["returns: ","_**System Function**_\n\nWhether MBR of one geometry contains MBR of another"],Cr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry contains another"],Mr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether one geometry crosses another"],xr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry crosses another"],Lr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nDimension of geometry"],Pr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nDimension of geometry"],br=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBRs of two geometries are disjoint"],vr=["returns: ","_**System Function**_\n\nWhether MBRs of two geometries are disjoint"],Ur=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry is disjoint from another"],Wr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nEnd Point of LineString"],Gr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nEnd Point of LineString"],Br=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn MBR of geometry"],Yr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn MBR of geometry"],Xr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBRs of two geometries are equal"],wr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBRs of two geometries are equal"],Kr=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nWhether MBRs of two geometries are equal"],Hr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry is equal to another"],Vr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn exterior ring of Polygon"],Jr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn exterior ring of Polygon"],kr=["returns: ","_**System Function**_ (⊕ 8.0.11)\n\nConstruct geometry collection from geometries"],jr=["returns: ","_**System Function**_\n\nConstruct geometry collection from geometries"],Qr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn length of LineString"],qr=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nReturn length of LineString"],zr=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn geometry collection from WKT"],Zr=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn geometry collection from WKT"],$r=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn geometry collection from WKB"],ns=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn geometry collection from WKB"],ts=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn geometry from WKT"],es=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn geometry from WKT"],rs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn geometry from WKB"],ss=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn geometry from WKB"],is=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn N-th geometry from geometry collection"],us=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn N-th geometry from geometry collection"],os=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn name of geometry type"],ms=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn name of geometry type"],_s=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn N-th interior ring of Polygon"],as=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn N-th interior ring of Polygon"],cs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBRs of two geometries intersect"],Ss=["returns: ","_**System Function**_\n\nWhether MBRs of two geometries intersect"],gs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry intersects another"],ys=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether a geometry is closed and simple"],Ts=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether a geometry is closed and simple"],Es=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nPlaceholder function"],Rs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nPlaceholder function"],ds=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether a geometry is simple"],Fs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether a geometry is simple"],ls=["returns: ","_**System Function**_\n\nConstruct LineString from Point values"],Ns=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct LineString from WKT"],hs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct LineString from WKT"],ps=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct LineString from WKB"],fs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct LineString from WKB"],As=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nWhether one MBR is covered by another"],Is=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nWhether one MBR covers another"],Os=["returns: ","_**System Function**_\n\nWhether MBRs of two geometries touch"],Ds=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiLineString from WKT"],Cs=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiLineString from WKT"],Ms=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiLineString from WKB"],xs=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiLineString from WKB"],Ls=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiPoint from WKT"],Ps=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiPoint from WKT"],bs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiPoint from WKB"],vs=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiPoint from WKB"],Us=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiPolygon from WKT"],Ws=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiPolygon from WKT"],Gs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct MultiPolygon from WKB"],Bs=["returns: ","_**System Function**_ (⊕ 5.7.6)\n\nConstruct MultiPolygon from WKB"],Ys=["returns: ","_**System Function**_\n\nContruct MultiLineString from LineString values"],Xs=["returns: ","_**System Function**_\n\nConstruct MultiPoint from Point values"],ws=["returns: ","_**System Function**_\n\nConstruct MultiPolygon from Polygon values"],Ks=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn number of geometries in geometry collection"],Hs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn number of geometries in geometry collection"],Vs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn number of interior rings in Polygon"],Js=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn number of interior rings in Polygon"],ks=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn number of points in LineString"],js=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn number of points in LineString"],Qs=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBRs of two geometries overlap"],qs=["returns: ","_**System Function**_\n\nWhether MBRs of two geometries overlap"],zs=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry overlaps another"],Zs=["returns: ","_**System Function**_\n\nConstruct Point from coordinates"],$s=["returns: ","_**System Function**_\n\nConstruct Polygon from LineString arguments"],ni=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct Point from WKT"],ti=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct Point from WKT"],ei=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct Point from WKB"],ri=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct Point from WKB"],si=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn N-th point from LineString"],ii=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn N-th point from LineString"],ui=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct Polygon from WKT"],oi=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct Polygon from WKT"],mi=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nConstruct Polygon from WKB"],_i=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nConstruct Polygon from WKB"],ai=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn spatial reference system ID for geometry"],ci=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn spatial reference system ID for geometry"],Si=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nStart Point of LineString"],gi=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nStart Point of LineString"],yi=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether one geometry touches another"],Ti=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry touches another"],Ei=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nWhether MBR of one geometry is within MBR of another"],Ri=["returns: ","_**System Function**_\n\nWhether MBR of one geometry is within MBR of another"],di=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nWhether one geometry is within another"],Fi=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn X coordinate of Point"],li=["returns: ","_**System Function**_ (⊕ 8.0.12)\n\nReturn latitude of Point"],Ni=["returns: ","_**System Function**_ (⊕ 8.0.12)\n\nReturn longitude of Point"],hi=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn X coordinate of Point"],pi=["returns: ","_**System Function**_ (⊘ 5.7.6)\n\nReturn Y coordinate of Point"],fi=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn Y coordinate of Point"],Ai=["returns: ","_**System Function**_ (⊕ 5.6.1, ⊘ 5.7.6)\n\nReturn geometry of points within given distance from geometry"],Ii=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nReturn geometry of points within given distance from geometry"],Oi=["returns: string","_**System Function**_ (⊕ 5.7.7)\n\nProduce strategy option for ST_Buffer()"],Di=["returns: ","_**System Function**_ (⊕ 5.7.5, ⊘ 5.7.6)\n\nReturn convex hull of geometry"],Ci=["returns: ","_**System Function**_ (⊕ 5.7.5)\n\nReturn convex hull of geometry"],Mi=["returns: ","_**System Function**_ (⊕ 5.7.5, ⊘ 5.7.6)\n\nThe distance of one geometry from another"],xi=["returns: ","_**System Function**_ (⊕ 5.6.1)\n\nThe distance of one geometry from another"],Li=["returns: string","_**System Function**_ (⊕ 5.7.5)\n\nProduce a geohash value"],Pi=["returns: numeric","_**System Function**_ (⊕ 5.7.5)\n\nReturn longitude from geohash value"],bi=["returns: numeric","_**System Function**_ (⊕ 5.7.5)\n\nReturn latitude from geohash value"],vi=["returns: point","_**System Function**_ (⊕ 5.7.5)\n\nConvert geohash value to POINT value"],Ui=["returns: string","_**System Function**_ (⊕ 5.7.5)\n\nGenerate GeoJSON object from geometry"],Wi=["returns: geometry","_**System Function**_ (⊕ 5.7.5)\n\nGenerate geometry from GeoJSON object"],Gi=["returns: geometry","_**System Function**_ (⊕ 5.6.1)\n\nReturn point set difference of two geometries"],Bi=["returns: geometry","_**System Function**_ (⊕ 5.6.1)\n\nReturn point set symmetric difference of two geometries"],Yi=["returns: geometry","_**System Function**_ (⊕ 5.6.1)\n\nReturn point set intersection of two geometries"],Xi=["returns: ","_**System Function**_ (⊕ 8.0.13)\n\nTransform coordinates of geometry"],wi=["returns: geometry","_**System Function**_ (⊕ 5.6.1)\n\nReturn point set union of two geometries"],Ki=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nDecrypt ciphertext using private or public key"],Hi=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nDerive symmetric key from asymmetric keys"],Vi=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nEncrypt cleartext using private or public key"],Ji=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nGenerate signature from digest"],ki=["returns: boolean","_**System Function**_ (⊕ 8.0.11)\n\nVerify that signature matches digest"],ji=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nCreate private key"],Qi=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nCreate public key"],qi=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nGenerate shared DH secret"],zi=["returns: string","_**System Function**_ (⊕ 8.0.11)\n\nGenerate digest from string"],Zi=["returns: double","_**System Function**_ (⊕ 5.7.6)\n\nMinimum distance on earth between two geometries"],$i=["returns: boolean","_**System Function**_ (⊕ 5.7.6)\n\nWhether a geometry is valid"],nu=["returns: geometry","_**System Function**_ (⊕ 5.7.6)\n\nRectangle around two points"],tu=["returns: geometry","_**System Function**_ (⊕ 5.7.6)\n\nReturn simplified geometry"],eu=["returns: geometry","_**System Function**_ (⊕ 5.7.6)\n\nReturn validated geometry"],ru=["returns: geometry","_**System Function**_ (⊕ 8.0.1)\n\nReturn argument with X/Y coordinates swapped"],su=["returns: json","_**System Function**_ (⊕ 5.7.8, ⊘ 5.7.9, ⊗ 8.0.0)\n\nAppend data to JSON document"],iu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nCreate JSON array"],uu=["returns: json","_**System Function**_ (⊕ 8.0.1)\n\nReturn result set as a single JSON array"],ou=["returns: json","_**System Function**_ (⊕ 5.7.9)\n\nAppend data to JSON document"],mu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nInsert into JSON array"],_u=["returns: boolean","_**System Function**_ (⊕ 5.7.8)\n\nWhether JSON document contains specific object at path"],au=["returns: boolean","_**System Function**_ (⊕ 5.7.8)\n\nWhether JSON document contains any data at path"],cu=["returns: integer","_**System Function**_ (⊕ 5.7.8)\n\nMaximum depth of JSON document"],Su=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nReturn data from JSON document"],gu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nInsert data into JSON document"],yu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nArray of keys from JSON document"],Tu=["returns: integer","_**System Function**_ (⊕ 5.7.8)\n\nNumber of elements in JSON document"],Eu=["returns: json","_**System Function**_ (⊕ 5.7.8, ⊘ 8.0.3)\n\nMerge JSON documents, preserving duplicate keys. Deprecated synonym for JSON_MERGE_PRESERVE()"],Ru=["returns: json","_**System Function**_ (⊕ 8.0.3)\n\nMerge JSON documents, replacing values of duplicate keys"],du=["returns: json","_**System Function**_ (⊕ 8.0.3)\n\nMerge JSON documents, preserving duplicate keys"],Fu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nCreate JSON object"],lu=["returns: json","_**System Function**_ (⊕ 8.0.1)\n\nReturn result set as a single JSON object"],Nu=["returns: json","_**System Function**_ (⊕ 8.0.1)\n\nPrint a JSON document in human-readable format"],hu=["returns: boolean","_**System Function**_ (⊕ 8.0.17)\n\nCompares two JSON documents, returns TRUE (1) if these have any key-value pairs or array elements in common, otherwise FALSE (0)"],pu=["returns: string","_**System Function**_ (⊕ 5.7.8)\n\nQuote JSON document"],fu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nRemove data from JSON document"],Au=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nReplace values in JSON document"],Iu=["returns: boolean","_**System Function**_ (⊕ 8.0.17)\n\nValidate JSON document against JSON schema; returns TRUE/1 if document validates against schema, or FALSE/0 if it does not"],Ou=["returns: string","_**System Function**_ (⊕ 8.0.17)\n\nValidate JSON document against JSON schema; returns report in JSON format on outcome on validation including success or failure and reasons for failure"],Du=["returns: string","_**System Function**_ (⊕ 5.7.8)\n\nPath to value within JSON document"],Cu=["returns: json","_**System Function**_ (⊕ 5.7.8)\n\nInsert data into JSON document"],Mu=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nFreed space within binary representation of JSON column value following partial update"],xu=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nSpace used for storage of binary representation of a JSON document"],Lu=["returns: table","_**System Function**_ (⊕ 8.0.4)\n\nReturn data from a JSON expression as a relational table"],Pu=["returns: string","_**System Function**_ (⊕ 5.7.8)\n\nType of JSON value"],bu=["returns: string","_**System Function**_ (⊕ 5.7.8)\n\nUnquote JSON value"],vu=["returns: boolean","_**System Function**_ (⊕ 5.7.8)\n\nWhether JSON value is valid"],Uu=["returns: mixed","_**System Function**_ (⊕ 8.0.21)\n\nExtract value from JSON document at location pointed to by path provided; return this value as VARCHAR(512) or specified type"],Wu=["**ExtractValue**(`xml_frag`, `xml_path`)\n- `xml_frag` (string) => XML fragment\n- `xml_path` (string) => XPath expression\n\nreturns: string","_**System Function**_ (⊕ 5.1.5)\n\nExtract a value from an XML string using XPath notation"],Gu=["**UpdateXML**(`xml_target`, `xpath_expr`, `new_xml`))\n- `xml_target` (string) => XML Target\n- `xpath_expr` (string) => XPath\n- `new_xml` (string) => New XML\n\nreturns: string","_**System Function**_ (⊕ 5.1.5)\n\nReturn replaced XML fragment"],Bu=["returns: integer","_**System Function**_ (⊕ 8.0.1)\n\nDistinguish super-aggregate ROLLUP rows from regular rows"],Yu=["returns: ","_**System Function**_\n\nInternal use only"],Xu=["returns: ","_**System Function**_\n\nInternal use only"],wu=["returns: ","_**System Function**_\n\nInternal use only"],Ku=["returns: ","_**System Function**_\n\nInternal use only"],Hu=["returns: ","_**System Function**_\n\nInternal use only"],Vu=["returns: ","_**System Function**_\n\nInternal use only"],Ju=["returns: ","_**System Function**_\n\nInternal use only"],ku=["returns: ","_**System Function**_\n\nInternal use only"],ju=["returns: ","_**System Function**_\n\nInternal use only"],Qu=["returns: ","_**System Function**_\n\nInternal use only"],qu=["returns: ","_**System Function**_\n\nInternal use only"],zu=["returns: ","_**System Function**_\n\nInternal use only"],Zu=["returns: ","_**System Function**_\n\nInternal use only"],$u=["returns: ","_**System Function**_\n\nInternal use only"],no=["returns: ","_**System Function**_\n\nInternal use only"],to=["returns: ","_**System Function**_\n\nInternal use only"],eo=["returns: ","_**System Function**_\n\nInternal use only"],ro=["returns: ","_**System Function**_\n\nInternal use only"],so=["returns: ","_**System Function**_\n\nInternal use only"],io=["returns: ","_**System Function**_\n\nInternal use only"],uo=["returns: ","_**System Function**_\n\nInternal use only"],oo=["returns: ","_**System Function**_\n\nInternal use only"],mo=["returns: numeric","_**System Function**_ (⊕ 8.0.2)\n\nCumulative distribution value"],_o=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nRank of current row within its partition, without gaps"],ao=["returns: varies","_**System Function**_ (⊕ 8.0.2)\n\nValue of argument from first row of window frame"],co=["returns: varies","_**System Function**_ (⊕ 8.0.2)\n\nValue of argument from row lagging current row within partition"],So=["returns: varies","_**System Function**_ (⊕ 8.0.2)\n\nValue of argument from last row of window frame"],go=["returns: varies","_**System Function**_ (⊕ 8.0.2)\n\nValue of argument from row leading current row within partition"],yo=["returns: varies","_**System Function**_ (⊕ 8.0.2)\n\nValue of argument from N-th row of window frame"],To=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nBucket number of current row within its partition."],Eo=["returns: numeric","_**System Function**_ (⊕ 8.0.2)\n\nPercentage rank value"],Ro=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nRank of current row within its partition, with gaps"],Fo=["returns: integer","_**System Function**_ (⊕ 8.0.2)\n\nNumber of current row within its partition"],lo=["returns: string","_**System Function**_ (⊕ 8.0.4)\n\nCompute statement digest hash value"],No=["returns: string","_**System Function**_ (⊕ 8.0.4)\n\nCompute normalized statement digest"],ho=["returns: string","_**System Function**_ (⊕ 8.0.4)\n\nICU library version"],po=["returns: string","_**System Function**_ (⊕ 8.0.16)\n\nConvert time in picoseconds to value with units"],fo=["returns: string","_**System Function**_ (⊕ 8.0.16)\n\nConvert byte count to value with units"],Ao=["returns: integer","_**System Function**_ (⊕ 8.0.16)\n\nPerformance Schema thread ID for current thread"],Io=["returns: integer","_**System Function**_ (⊕ 8.0.16)\n\nPerformance Schema thread ID for given thread"],Oo=["returns: ","_**System Function**_ (⊕ 8.0.19)\n\nInternal use only"],Do=["returns: ","_**System Function**_ (⊕ 8.0.19)\n\nInternal use only"],Co=["returns: ","_**System Function**_ (⊕ 8.0.19)\n\nInternal use only"],Mo=["returns: ","_**System Function**_ (⊕ 8.0.19)\n\nInternal use only"],xo=["returns: ","_**System Function**_ (⊕ 8.0.19)\n\nInternal use only"];var Lo={ANY_VALUE:n,CAST:t,CONVERT:e,ABS:r,ACOS:s,ASIN:i,ATAN:u,CEIL:o,CEILING:m,COS:_,COT:a,CRC32:c,DEGREES:S,EXP:g,FLOOR:y,LN:T,LOG:E,LOG2:R,LOG10:d,MOD:F,PI:l,POW:N,POWER:h,RADIANS:p,RAND:f,RANDOM_BYTES:A,ROUND:I,SIGN:O,SIN:D,SQRT:C,TAN:M,TRUNCATE:x,ADDDATE:L,ADDTIME:P,CONVERT_TZ:b,CURDATE:v,CURRENT_DATE:U,CURTIME:W,CURRENT_ROLE:G,CURRENT_TIME:B,CURRENT_TIMESTAMP:Y,DATE:X,DATEDIFF:w,DATE_ADD:K,DATE_SUB:H,DATE_FORMAT:V,DAY:J,DAYNAME:k,DAYOFMONTH:j,DAYOFWEEK:Q,DAYOFYEAR:q,EXTRACT:z,FROM_BASE64:Z,FROM_DAYS:$,FROM_UNIXTIME:nn,GET_FORMAT:tn,GTID_SUBSET:en,GTID_SUBTRACT:rn,HOUR:sn,LAST_DAY:un,LOCALTIME:on,LOCALTIMESTAMP:mn,MAKEDATE:_n,MAKETIME:an,MICROSECOND:cn,MINUTE:Sn,MONTH:gn,MONTHNAME:yn,NOW:Tn,PERIOD_ADD:En,PERIOD_DIFF:Rn,QUARTER:dn,SECOND:Fn,SEC_TO_TIME:ln,STR_TO_DATE:Nn,SUBDATE:hn,SUBTIME:pn,SYSDATE:fn,TIME:An,TIMEDIFF:In,TIMESTAMP:On,TIMESTAMPADD:Dn,TIMESTAMPDIFF:Cn,TIME_FORMAT:Mn,TIME_TO_SEC:xn,TO_BASE64:Ln,TO_DAYS:Pn,TO_SECONDS:bn,UNIX_TIMESTAMP:vn,UTC_DATE:Un,UTC_TIME:Wn,UTC_TIMESTAMP:Gn,WEEK:Bn,WEEKDAY:Yn,WEEKOFYEAR:Xn,YEAR:wn,YEARWEEK:Kn,BIT_COUNT:Hn,AES_ENCRYPT:Vn,AES_DECRYPT:Jn,COMPRESS:kn,DECODE:jn,ENCODE:Qn,DES_DECRYPT:qn,DES_ENCRYPT:zn,ENCRYPT:Zn,MD5:$n,OLD_PASSWORD:nt,PASSWORD:tt,SHA:et,SHA2:rt,UNCOMPRESS:st,UNCOMPRESSED_LENGTH:it,BENCHMARK:ut,CHARSET:ot,COERCIBILITY:mt,COLLATION:_t,CONNECTION_ID:at,CURRENT_USER:ct,DATABASE:St,FOUND_ROWS:gt,LAST_INSERT_ID:yt,ROLES_GRAPHML:Tt,ROW_COUNT:Et,SCHEMA:Rt,SESSION_USER:dt,SYSTEM_USER:Ft,USER:lt,DEFAULT:Nt,FORMAT:ht,GET_LOCK:pt,INET_ATON:ft,INET_NTOA:At,INET6_ATON:It,INET6_NTOA:Ot,IS_FREE_LOCK:Dt,IS_IPV4:Ct,IS_IPV4_COMPAT:Mt,IS_IPV4_MAPPED:xt,IS_IPV6:Lt,IS_USED_LOCK:Pt,MASTER_POS_WAIT:bt,NAME_CONST:vt,RELEASE_ALL_LOCKS:Ut,RELEASE_LOCK:Wt,SLEEP:Gt,UUID:Bt,UUID_SHORT:Yt,BIN_TO_UUID:Xt,IS_UUID:wt,UUID_TO_BIN:Kt,VALUES:Ht,AVG:Vt,BIT_AND:Jt,BIT_OR:kt,BIT_XOR:jt,COUNT:Qt,GROUP_CONCAT:qt,MIN:zt,MAX:Zt,STD:$t,STDDEV:ne,STDDEV_POP:te,STDDEV_SAMP:ee,SUM:re,VAR_POP:se,VAR_SAMP:ie,VARIANCE:ue,IF:oe,IFNULL:me,NULLIF:_e,ASCII:ae,BIN:ce,BIT_LENGTH:Se,CHAR:ge,CHAR_LENGTH:ye,CHARACTER_LENGTH:Te,CONCAT:Ee,CONCAT_WS:Re,CONV:de,ELT:Fe,EXPORT_SET:le,FIELD:Ne,FIND_IN_SET:he,HEX:pe,INSERT:fe,INSTR:Ae,LCASE:Ie,LEFT:Oe,LENGTH:De,LOAD_FILE:Ce,VERSION:Me,LOCATE:xe,LOWER:Le,LPAD:Pe,LTRIM:be,MAKE_SET:ve,MID:Ue,OCT:We,OCTET_LENGTH:Ge,ORD:Be,POSITION:Ye,QUOTE:Xe,REPEAT:we,REPLACE:Ke,REVERSE:He,RIGHT:Ve,RPAD:Je,RTRIM:ke,SOUNDEX:je,SPACE:Qe,SUBSTR:qe,SUBSTRING:ze,SUBSTRING_INDEX:Ze,TRIM:$e,UCASE:nr,UNHEX:tr,UPPER:er,STRCMP:rr,MATCH:sr,GREATEST:ir,ISNULL:ur,INTERVAL:or,LEAST:mr,COALESCE:_r,"PROCEDURE ANALYSE":["**PROCEDURE ANALYSE**(`max_elements`,`max_memory`)\n- `max_elements` (numeric) => Number\n- `max_memory` (numeric) => Number\n\nreturns: mixed","_**System Function**_ (⊘ 5.7.18)\n\nAnalyze the results of a query"],REGEXP_INSTR:ar,REGEXP_LIKE:cr,REGEXP_REPLACE:Sr,REGEXP_SUBSTR:gr,WEIGHT_STRING:yr,VALIDATE_PASSWORD_STRENGTH:Tr,SQL_THREAD_WAIT_AFTER_GTIDS:Er,WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:Rr,WAIT_FOR_EXECUTED_GTID_SET:dr,Area:Fr,ST_Area:lr,AsWKB:Nr,ST_AsWKB:hr,AsWKT:pr,ST_AsWKT:fr,Centroid:Ar,ST_Centroid:Ir,Contains:Or,MBRContains:Dr,ST_Contains:Cr,Crosses:Mr,ST_Crosses:xr,Dimension:Lr,ST_Dimension:Pr,Disjoint:br,MBRDisjoint:vr,ST_Disjoint:Ur,EndPoint:Wr,ST_EndPoint:Gr,Envelope:Br,ST_Envelope:Yr,Equals:Xr,MBREqual:wr,MBREquals:Kr,ST_Equals:Hr,ExteriorRing:Vr,ST_ExteriorRing:Jr,GeomCollection:kr,GeometryCollection:jr,GLength:Qr,ST_Length:qr,GeometryCollectionFromText:zr,ST_GeomCollFromTxt:Zr,GeometryCollectionFromWKB:$r,ST_GeometryCollectionFromWKB:ns,GeometryFromText:ts,ST_GeometryFromText:es,GeometryFromWKB:rs,ST_GeometryFromWKB:ss,GeometryN:is,ST_GeometryN:us,GeometryType:os,ST_GeometryType:ms,InteriorRingN:_s,ST_InteriorRingN:as,Intersects:cs,MBRIntersects:Ss,ST_Intersects:gs,IsClosed:ys,ST_IsClosed:Ts,IsEmpty:Es,ST_IsEmpty:Rs,IsSimple:ds,ST_IsSimple:Fs,LineString:ls,LineStringFromText:Ns,ST_LineStringFromText:hs,LineStringFromWKB:ps,ST_LineStringFromWKB:fs,MBRCoveredBy:As,MBRCovers:Is,MBRTouches:Os,MultiLineStringFromText:Ds,ST_MultiLineStringFromText:Cs,MultiLineStringFromWKB:Ms,ST_MultiLineStringFromWKB:xs,MultiPointFromText:Ls,ST_MultiPointFromText:Ps,MultiPointFromWKB:bs,ST_MultiPointFromWKB:vs,MultiPolygonFromText:Us,ST_MultiPolygonFromText:Ws,MultiPolygonFromWKB:Gs,ST_MultiPolygonFromWKB:Bs,MultiLineString:Ys,MultiPoint:Xs,MultiPolygon:ws,NumGeometries:Ks,ST_NumGeometries:Hs,NumInteriorRings:Vs,ST_NumInteriorRings:Js,NumPoints:ks,ST_NumPoints:js,Overlaps:Qs,MBROverlaps:qs,ST_Overlaps:zs,Point:Zs,Polygon:$s,PointFromText:ni,ST_PointFromText:ti,PointFromWKB:ei,ST_PointFromWKB:ri,PointN:si,ST_PointN:ii,PolygonFromText:ui,ST_PolygonFromText:oi,PolygonFromWKB:mi,ST_PolygonFromWKB:_i,SRID:ai,ST_SRID:ci,StartPoint:Si,ST_StartPoint:gi,Touches:yi,ST_Touches:Ti,Within:Ei,MBRWithin:Ri,ST_Within:di,X:Fi,ST_Latitude:li,ST_Longitude:Ni,ST_X:hi,Y:pi,ST_Y:fi,Buffer:Ai,ST_Buffer:Ii,ST_Buffer_Strategy:Oi,ConvexHull:Di,ST_ConvexHull:Ci,Distance:Mi,ST_Distance:xi,ST_GeoHash:Li,ST_LongFromGeoHash:Pi,ST_LatFromGeoHash:bi,ST_PointFromGeoHash:vi,ST_AsGeoJSON:Ui,ST_GeomFromGeoJSON:Wi,ST_Difference:Gi,ST_SymDifference:Bi,ST_Intersection:Yi,ST_Transform:Xi,ST_Union:wi,ASYMMETRIC_DECRYPT:Ki,ASYMMETRIC_DERIVE:Hi,ASYMMETRIC_ENCRYPT:Vi,ASYMMETRIC_SIGN:Ji,ASYMMETRIC_VERIFY:ki,CREATE_ASYMMETRIC_PRIV_KEY:ji,CREATE_ASYMMETRIC_PUB_KEY:Qi,CREATE_DH_PARAMETERS:qi,CREATE_DIGEST:zi,ST_Distance_Sphere:Zi,ST_IsValid:$i,ST_MakeEnvelope:nu,ST_Simplify:tu,ST_Validate:eu,ST_SwapXY:ru,JSON_APPEND:su,JSON_ARRAY:iu,JSON_ARRAYAGG:uu,JSON_ARRAY_APPEND:ou,JSON_ARRAY_INSERT:mu,JSON_CONTAINS:_u,JSON_CONTAINS_PATH:au,JSON_DEPTH:cu,JSON_EXTRACT:Su,JSON_INSERT:gu,JSON_KEYS:yu,JSON_LENGTH:Tu,JSON_MERGE:Eu,JSON_MERGE_PATCH:Ru,JSON_MERGE_PRESERVE:du,JSON_OBJECT:Fu,JSON_OBJECTAGG:lu,JSON_PRETTY:Nu,JSON_OVERLAPS:hu,JSON_QUOTE:pu,JSON_REMOVE:fu,JSON_REPLACE:Au,JSON_SCHEMA_VALID:Iu,JSON_SCHEMA_VALIDATION_REPORT:Ou,JSON_SEARCH:Du,JSON_SET:Cu,JSON_STORAGE_FREE:Mu,JSON_STORAGE_SIZE:xu,JSON_TABLE:Lu,JSON_TYPE:Pu,JSON_UNQUOTE:bu,JSON_VALID:vu,JSON_VALUE:Uu,ExtractValue:Wu,UpdateXML:Gu,GROUPING:Bu,CAN_ACCESS_COLUMN:Yu,CAN_ACCESS_DATABASE:Xu,CAN_ACCESS_TABLE:wu,CAN_ACCESS_VIEW:Ku,GET_DD_COLUMN_PRIVILEGES:Hu,GET_DD_CREATE_OPTIONS:Vu,GET_DD_INDEX_SUB_PART_LENGTH:Ju,INTERNAL_AUTO_INCREMENT:ku,INTERNAL_AVG_ROW_LENGTH:ju,INTERNAL_CHECK_TIME:Qu,INTERNAL_CHECKSUM:qu,INTERNAL_DATA_FREE:zu,INTERNAL_DATA_LENGTH:Zu,INTERNAL_DD_CHAR_LENGTH:$u,INTERNAL_GET_COMMENT_OR_ERROR:no,INTERNAL_GET_VIEW_WARNING_OR_ERROR:to,INTERNAL_INDEX_COLUMN_CARDINALITY:eo,INTERNAL_INDEX_LENGTH:ro,INTERNAL_KEYS_DISABLED:so,INTERNAL_MAX_DATA_LENGTH:io,INTERNAL_TABLE_ROWS:uo,INTERNAL_UPDATE_TIME:oo,CUME_DIST:mo,DENSE_RANK:_o,FIRST_VALUE:ao,LAG:co,LAST_VALUE:So,LEAD:go,NTH_VALUE:yo,NTILE:To,PERCENT_RANK:Eo,RANK:Ro,ROW_NUMBER:Fo,STATEMENT_DIGEST:lo,STATEMENT_DIGEST_TEXT:No,ICU_VERSION:ho,FORMAT_PICO_TIME:po,FORMAT_BYTES:fo,PS_CURRENT_THREAD_ID:Ao,PS_THREAD_ID:Io,INTERNAL_GET_ENABLED_ROLE_JSON:Oo,INTERNAL_GET_HOSTNAME:Do,INTERNAL_GET_USERNAME:Co,INTERNAL_IS_ENABLED_ROLE:Mo,INTERNAL_IS_MANDATORY_ROLE:xo};export{r as ABS,s as ACOS,L as ADDDATE,P as ADDTIME,Jn as AES_DECRYPT,Vn as AES_ENCRYPT,n as ANY_VALUE,ae as ASCII,i as ASIN,Ki as ASYMMETRIC_DECRYPT,Hi as ASYMMETRIC_DERIVE,Vi as ASYMMETRIC_ENCRYPT,Ji as ASYMMETRIC_SIGN,ki as ASYMMETRIC_VERIFY,u as ATAN,Vt as AVG,Fr as Area,Nr as AsWKB,pr as AsWKT,ut as BENCHMARK,ce as BIN,Xt as BIN_TO_UUID,Jt as BIT_AND,Hn as BIT_COUNT,Se as BIT_LENGTH,kt as BIT_OR,jt as BIT_XOR,Ai as Buffer,Yu as CAN_ACCESS_COLUMN,Xu as CAN_ACCESS_DATABASE,wu as CAN_ACCESS_TABLE,Ku as CAN_ACCESS_VIEW,t as CAST,o as CEIL,m as CEILING,ge as CHAR,Te as CHARACTER_LENGTH,ot as CHARSET,ye as CHAR_LENGTH,_r as COALESCE,mt as COERCIBILITY,_t as COLLATION,kn as COMPRESS,Ee as CONCAT,Re as CONCAT_WS,at as CONNECTION_ID,de as CONV,e as CONVERT,b as CONVERT_TZ,_ as COS,a as COT,Qt as COUNT,c as CRC32,ji as CREATE_ASYMMETRIC_PRIV_KEY,Qi as CREATE_ASYMMETRIC_PUB_KEY,qi as CREATE_DH_PARAMETERS,zi as CREATE_DIGEST,mo as CUME_DIST,v as CURDATE,U as CURRENT_DATE,G as CURRENT_ROLE,B as CURRENT_TIME,Y as CURRENT_TIMESTAMP,ct as CURRENT_USER,W as CURTIME,Ar as Centroid,Or as Contains,Di as ConvexHull,Mr as Crosses,St as DATABASE,X as DATE,w as DATEDIFF,K as DATE_ADD,V as DATE_FORMAT,H as DATE_SUB,J as DAY,k as DAYNAME,j as DAYOFMONTH,Q as DAYOFWEEK,q as DAYOFYEAR,jn as DECODE,Nt as DEFAULT,S as DEGREES,_o as DENSE_RANK,qn as DES_DECRYPT,zn as DES_ENCRYPT,Lr as Dimension,br as Disjoint,Mi as Distance,Fe as ELT,Qn as ENCODE,Zn as ENCRYPT,g as EXP,le as EXPORT_SET,z as EXTRACT,Wr as EndPoint,Br as Envelope,Xr as Equals,Vr as ExteriorRing,Wu as ExtractValue,Ne as FIELD,he as FIND_IN_SET,ao as FIRST_VALUE,y as FLOOR,ht as FORMAT,fo as FORMAT_BYTES,po as FORMAT_PICO_TIME,gt as FOUND_ROWS,Z as FROM_BASE64,$ as FROM_DAYS,nn as FROM_UNIXTIME,Hu as GET_DD_COLUMN_PRIVILEGES,Vu as GET_DD_CREATE_OPTIONS,Ju as GET_DD_INDEX_SUB_PART_LENGTH,tn as GET_FORMAT,pt as GET_LOCK,Qr as GLength,ir as GREATEST,Bu as GROUPING,qt as GROUP_CONCAT,en as GTID_SUBSET,rn as GTID_SUBTRACT,kr as GeomCollection,jr as GeometryCollection,zr as GeometryCollectionFromText,$r as GeometryCollectionFromWKB,ts as GeometryFromText,rs as GeometryFromWKB,is as GeometryN,os as GeometryType,pe as HEX,sn as HOUR,ho as ICU_VERSION,oe as IF,me as IFNULL,It as INET6_ATON,Ot as INET6_NTOA,ft as INET_ATON,At as INET_NTOA,fe as INSERT,Ae as INSTR,ku as INTERNAL_AUTO_INCREMENT,ju as INTERNAL_AVG_ROW_LENGTH,qu as INTERNAL_CHECKSUM,Qu as INTERNAL_CHECK_TIME,zu as INTERNAL_DATA_FREE,Zu as INTERNAL_DATA_LENGTH,$u as INTERNAL_DD_CHAR_LENGTH,no as INTERNAL_GET_COMMENT_OR_ERROR,Oo as INTERNAL_GET_ENABLED_ROLE_JSON,Do as INTERNAL_GET_HOSTNAME,Co as INTERNAL_GET_USERNAME,to as INTERNAL_GET_VIEW_WARNING_OR_ERROR,eo as INTERNAL_INDEX_COLUMN_CARDINALITY,ro as INTERNAL_INDEX_LENGTH,Mo as INTERNAL_IS_ENABLED_ROLE,xo as INTERNAL_IS_MANDATORY_ROLE,so as INTERNAL_KEYS_DISABLED,io as INTERNAL_MAX_DATA_LENGTH,uo as INTERNAL_TABLE_ROWS,oo as INTERNAL_UPDATE_TIME,or as INTERVAL,ur as ISNULL,Dt as IS_FREE_LOCK,Ct as IS_IPV4,Mt as IS_IPV4_COMPAT,xt as IS_IPV4_MAPPED,Lt as IS_IPV6,Pt as IS_USED_LOCK,wt as IS_UUID,_s as InteriorRingN,cs as Intersects,ys as IsClosed,Es as IsEmpty,ds as IsSimple,su as JSON_APPEND,iu as JSON_ARRAY,uu as JSON_ARRAYAGG,ou as JSON_ARRAY_APPEND,mu as JSON_ARRAY_INSERT,_u as JSON_CONTAINS,au as JSON_CONTAINS_PATH,cu as JSON_DEPTH,Su as JSON_EXTRACT,gu as JSON_INSERT,yu as JSON_KEYS,Tu as JSON_LENGTH,Eu as JSON_MERGE,Ru as JSON_MERGE_PATCH,du as JSON_MERGE_PRESERVE,Fu as JSON_OBJECT,lu as JSON_OBJECTAGG,hu as JSON_OVERLAPS,Nu as JSON_PRETTY,pu as JSON_QUOTE,fu as JSON_REMOVE,Au as JSON_REPLACE,Iu as JSON_SCHEMA_VALID,Ou as JSON_SCHEMA_VALIDATION_REPORT,Du as JSON_SEARCH,Cu as JSON_SET,Mu as JSON_STORAGE_FREE,xu as JSON_STORAGE_SIZE,Lu as JSON_TABLE,Pu as JSON_TYPE,bu as JSON_UNQUOTE,vu as JSON_VALID,Uu as JSON_VALUE,co as LAG,un as LAST_DAY,yt as LAST_INSERT_ID,So as LAST_VALUE,Ie as LCASE,go as LEAD,mr as LEAST,Oe as LEFT,De as LENGTH,T as LN,Ce as LOAD_FILE,on as LOCALTIME,mn as LOCALTIMESTAMP,xe as LOCATE,E as LOG,d as LOG10,R as LOG2,Le as LOWER,Pe as LPAD,be as LTRIM,ls as LineString,Ns as LineStringFromText,ps as LineStringFromWKB,_n as MAKEDATE,an as MAKETIME,ve as MAKE_SET,bt as MASTER_POS_WAIT,sr as MATCH,Zt as MAX,Dr as MBRContains,As as MBRCoveredBy,Is as MBRCovers,vr as MBRDisjoint,wr as MBREqual,Kr as MBREquals,Ss as MBRIntersects,qs as MBROverlaps,Os as MBRTouches,Ri as MBRWithin,$n as MD5,cn as MICROSECOND,Ue as MID,zt as MIN,Sn as MINUTE,F as MOD,gn as MONTH,yn as MONTHNAME,Ys as MultiLineString,Ds as MultiLineStringFromText,Ms as MultiLineStringFromWKB,Xs as MultiPoint,Ls as MultiPointFromText,bs as MultiPointFromWKB,ws as MultiPolygon,Us as MultiPolygonFromText,Gs as MultiPolygonFromWKB,vt as NAME_CONST,Tn as NOW,yo as NTH_VALUE,To as NTILE,_e as NULLIF,Ks as NumGeometries,Vs as NumInteriorRings,ks as NumPoints,We as OCT,Ge as OCTET_LENGTH,nt as OLD_PASSWORD,Be as ORD,Qs as Overlaps,tt as PASSWORD,Eo as PERCENT_RANK,En as PERIOD_ADD,Rn as PERIOD_DIFF,l as PI,Ye as POSITION,N as POW,h as POWER,Ao as PS_CURRENT_THREAD_ID,Io as PS_THREAD_ID,Zs as Point,ni as PointFromText,ei as PointFromWKB,si as PointN,$s as Polygon,ui as PolygonFromText,mi as PolygonFromWKB,dn as QUARTER,Xe as QUOTE,p as RADIANS,f as RAND,A as RANDOM_BYTES,Ro as RANK,ar as REGEXP_INSTR,cr as REGEXP_LIKE,Sr as REGEXP_REPLACE,gr as REGEXP_SUBSTR,Ut as RELEASE_ALL_LOCKS,Wt as RELEASE_LOCK,we as REPEAT,Ke as REPLACE,He as REVERSE,Ve as RIGHT,Tt as ROLES_GRAPHML,I as ROUND,Et as ROW_COUNT,Fo as ROW_NUMBER,Je as RPAD,ke as RTRIM,Rt as SCHEMA,Fn as SECOND,ln as SEC_TO_TIME,dt as SESSION_USER,et as SHA,rt as SHA2,O as SIGN,D as SIN,Gt as SLEEP,je as SOUNDEX,Qe as SPACE,Er as SQL_THREAD_WAIT_AFTER_GTIDS,C as SQRT,ai as SRID,lo as STATEMENT_DIGEST,No as STATEMENT_DIGEST_TEXT,$t as STD,ne as STDDEV,te as STDDEV_POP,ee as STDDEV_SAMP,rr as STRCMP,Nn as STR_TO_DATE,lr as ST_Area,Ui as ST_AsGeoJSON,hr as ST_AsWKB,fr as ST_AsWKT,Ii as ST_Buffer,Oi as ST_Buffer_Strategy,Ir as ST_Centroid,Cr as ST_Contains,Ci as ST_ConvexHull,xr as ST_Crosses,Gi as ST_Difference,Pr as ST_Dimension,Ur as ST_Disjoint,xi as ST_Distance,Zi as ST_Distance_Sphere,Gr as ST_EndPoint,Yr as ST_Envelope,Hr as ST_Equals,Jr as ST_ExteriorRing,Li as ST_GeoHash,Zr as ST_GeomCollFromTxt,Wi as ST_GeomFromGeoJSON,ns as ST_GeometryCollectionFromWKB,es as ST_GeometryFromText,ss as ST_GeometryFromWKB,us as ST_GeometryN,ms as ST_GeometryType,as as ST_InteriorRingN,Yi as ST_Intersection,gs as ST_Intersects,Ts as ST_IsClosed,Rs as ST_IsEmpty,Fs as ST_IsSimple,$i as ST_IsValid,bi as ST_LatFromGeoHash,li as ST_Latitude,qr as ST_Length,hs as ST_LineStringFromText,fs as ST_LineStringFromWKB,Pi as ST_LongFromGeoHash,Ni as ST_Longitude,nu as ST_MakeEnvelope,Cs as ST_MultiLineStringFromText,xs as ST_MultiLineStringFromWKB,Ps as ST_MultiPointFromText,vs as ST_MultiPointFromWKB,Ws as ST_MultiPolygonFromText,Bs as ST_MultiPolygonFromWKB,Hs as ST_NumGeometries,Js as ST_NumInteriorRings,js as ST_NumPoints,zs as ST_Overlaps,vi as ST_PointFromGeoHash,ti as ST_PointFromText,ri as ST_PointFromWKB,ii as ST_PointN,oi as ST_PolygonFromText,_i as ST_PolygonFromWKB,ci as ST_SRID,tu as ST_Simplify,gi as ST_StartPoint,ru as ST_SwapXY,Bi as ST_SymDifference,Ti as ST_Touches,Xi as ST_Transform,wi as ST_Union,eu as ST_Validate,di as ST_Within,hi as ST_X,fi as ST_Y,hn as SUBDATE,qe as SUBSTR,ze as SUBSTRING,Ze as SUBSTRING_INDEX,pn as SUBTIME,re as SUM,fn as SYSDATE,Ft as SYSTEM_USER,Si as StartPoint,M as TAN,An as TIME,In as TIMEDIFF,On as TIMESTAMP,Dn as TIMESTAMPADD,Cn as TIMESTAMPDIFF,Mn as TIME_FORMAT,xn as TIME_TO_SEC,Ln as TO_BASE64,Pn as TO_DAYS,bn as TO_SECONDS,$e as TRIM,x as TRUNCATE,yi as Touches,nr as UCASE,st as UNCOMPRESS,it as UNCOMPRESSED_LENGTH,tr as UNHEX,vn as UNIX_TIMESTAMP,er as UPPER,lt as USER,Un as UTC_DATE,Wn as UTC_TIME,Gn as UTC_TIMESTAMP,Bt as UUID,Yt as UUID_SHORT,Kt as UUID_TO_BIN,Gu as UpdateXML,Tr as VALIDATE_PASSWORD_STRENGTH,Ht as VALUES,ue as VARIANCE,se as VAR_POP,ie as VAR_SAMP,Me as VERSION,dr as WAIT_FOR_EXECUTED_GTID_SET,Rr as WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS,Bn as WEEK,Yn as WEEKDAY,Xn as WEEKOFYEAR,yr as WEIGHT_STRING,Ei as Within,Fi as X,pi as Y,wn as YEAR,Kn as YEARWEEK,Lo as default};
