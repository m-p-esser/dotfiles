import { IMrsDbObjectEditRequest, IRequestTypeMap, IRequisitionCallbackValues } from "../../../frontend/src/supplement/Requisitions";
import { IMySQLDbSystem } from "../../../frontend/src/communication";
import { EntityType, IDBEditorScriptState } from "../../../frontend/src/modules/db-editor";
import { EditorLanguage, INewEditorRequest, IRunQueryRequest, IScriptRequest } from "../../../frontend/src/supplement";
import { WebviewProvider } from "./WebviewProvider";
export declare class DBConnectionViewProvider extends WebviewProvider {
    #private;
    readonly currentSchemas: Map<number, string>;
    show(page: string): Promise<boolean>;
    showPageSection(pageId: string, type: EntityType, id: string): Promise<boolean>;
    runQuery(page: string, details: IRunQueryRequest): Promise<boolean>;
    runScript(page: string, details: IScriptRequest): Promise<boolean>;
    editScript(page: string, details: IScriptRequest): Promise<boolean>;
    loadScript(page: string, details: IScriptRequest): Promise<boolean>;
    createNewEditor(details: INewEditorRequest): Promise<boolean>;
    insertScriptData(state: IDBEditorScriptState): Promise<boolean>;
    addConnection(mdsData?: IMySQLDbSystem, profileName?: String): Promise<boolean>;
    removeConnection(connectionId: number): Promise<boolean>;
    editConnection(connectionId: number): Promise<boolean>;
    duplicateConnection(connectionId: number): Promise<boolean>;
    renameFile(request: IScriptRequest): Promise<boolean>;
    closeEditor(connectionId: number, editorId: string): Promise<boolean>;
    reselectLastItem(): void;
    createScript(language: EditorLanguage): void;
    editMrsDbObject(page: string, data: IMrsDbObjectEditRequest): Promise<boolean>;
    makeCurrentSchema(connectionId: number, schema: string): Promise<boolean>;
    protected requisitionsCreated(): void;
    protected forwardRequest: <K extends keyof IRequestTypeMap>(requestType: K, parameter: IRequisitionCallbackValues<K>) => Promise<boolean>;
    private createNewSession;
    private setCurrentSchema;
    private showInfo;
    private editorSaveNotebook;
    private editorSaveNotebookInPlace;
    private editorLoadNotebook;
    private showOpenDialog;
    private closeInstance;
}
