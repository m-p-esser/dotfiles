import { ExtensionContext } from "vscode";
import { DBType } from "../../frontend/src/supplement/ShellInterface";
import { IRequestTypeMap, IRequisitionCallbackValues, IWebviewProvider } from "../../frontend/src/supplement/Requisitions";
import { ICdmConnectionEntry } from "./tree-providers/ConnectionsTreeProvider/ConnectionsTreeDataModel";
import { DBConnectionViewProvider } from "./web-views/DBConnectionViewProvider";
export declare class ExtensionHost {
    #private;
    context: ExtensionContext;
    private url?;
    private providers;
    private lastActiveProvider?;
    private activeProfile?;
    private updatingSettings;
    private connectionsProvider;
    private dbEditorCommandHandler;
    private shellConsoleCommandHandler;
    private notebookProvider;
    private mrsCommandHandler;
    private mdsCommandHandler;
    private scriptsTreeDataProvider;
    private shellTasksTreeDataProvider;
    private shellTasks;
    private moduleDataCategories;
    constructor(context: ExtensionContext);
    get connections(): ICdmConnectionEntry[];
    closeAllTabs(): void;
    addNewShellTask(caption: string, shellArgs: string[], dbConnectionId?: number, showOutputChannel?: boolean, responses?: string[]): Promise<void>;
    determineConnection: (dbType?: DBType | undefined, forcePicker?: boolean | undefined) => Promise<ICdmConnectionEntry | undefined>;
    broadcastRequest: <K extends keyof IRequestTypeMap>(sender: IWebviewProvider | undefined, requestType: K, parameter: IRequisitionCallbackValues<K>) => Promise<void>;
    get currentProvider(): DBConnectionViewProvider | undefined;
    get newProvider(): DBConnectionViewProvider | undefined;
    private setupEnvironment;
    private onAuthentication;
    private updateProfileSettings;
    private updateVscodeSettings;
    private selectProfile;
    private taskPromptCallback;
    private taskMessageCallback;
    private connectedToUrl;
    private providerDisposed;
    private providerStateChanged;
    private proxyRequest;
    private updateStatusbar;
}
