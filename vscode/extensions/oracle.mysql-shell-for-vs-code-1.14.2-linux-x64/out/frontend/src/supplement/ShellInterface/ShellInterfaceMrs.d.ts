import { IShellDictionary } from "../../communication/Protocol";
import { IMrsStatusData, IMrsServiceData, IMrsAuthAppData, IMrsAuthVendorData, IMrsSchemaData, IShellMrsUpdateDbObjectKwargsValue, IMrsDbObjectData, IMrsAddContentSetData, IMrsContentSetData, IMrsContentFileData, IShellMrsUpdateAuthenticationAppKwargsValue, IMrsUserData, IShellMrsUpdateUserKwargsValue, IMrsRoleData, IMrsUserRoleData, IMrsRouterData, IMrsCurrentServiceMetadata, IMrsTableColumnWithReference, IMrsObjectFieldWithReference, IMrsObject, IMrsDbObjectParameterData } from "../../communication/ProtocolMrs";
export declare class ShellInterfaceMrs {
    moduleSessionLookupId: string;
    configure(enableMrs?: boolean, allowRecreationOnMajorUpgrade?: boolean, updateIfAvailable?: boolean, options?: string): Promise<void>;
    status(): Promise<IMrsStatusData>;
    listServices(): Promise<IMrsServiceData[]>;
    addService(urlContextRoot: string, urlProtocol: string[], urlHostName: string, comments: string, enabled: boolean, options: IShellDictionary | null, authPath: string, authCompletedUrl: string, authCompletedUrlValidation: string, authCompletedPageContent: string, authApps: IMrsAuthAppData[]): Promise<IMrsServiceData>;
    updateService(serviceId: string, urlContextRoot: string, urlHostName: string, value: IShellDictionary): Promise<void>;
    deleteService(serviceId: string | null): Promise<void>;
    getService(serviceId: string | null, urlContextRoot: string | null, urlHostName: string | null, getDefault: boolean | null, autoSelectSingle: boolean | null): Promise<IMrsServiceData>;
    setCurrentService(serviceId: string): Promise<void>;
    getCurrentServiceMetadata(): Promise<IMrsCurrentServiceMetadata>;
    getAuthVendors(): Promise<IMrsAuthVendorData[]>;
    addAuthApp(serviceId: string, authApp: IMrsAuthAppData, registerUsers: []): Promise<IMrsAuthAppData>;
    getAuthApps(serviceId: string): Promise<IMrsAuthAppData[]>;
    getAuthApp(appId: string): Promise<IMrsAuthAppData>;
    deleteAuthApp(appId: string): Promise<void>;
    updateAuthApp(appId: string, value: IShellMrsUpdateAuthenticationAppKwargsValue): Promise<void>;
    listUsers(serviceId?: string, authAppId?: string): Promise<IMrsUserData[]>;
    deleteUser(userId: string): Promise<void>;
    addUser(authAppId: string, name: string, email: string, vendorUserId: string, loginPermitted: boolean, mappedUserId: string, appOptions: IShellDictionary | null, authString: string, userRoles: IMrsUserRoleData[]): Promise<void>;
    updateUser(userId: string, value: IShellMrsUpdateUserKwargsValue, userRoles: IMrsUserRoleData[]): Promise<void>;
    listSchemas(serviceId?: string): Promise<IMrsSchemaData[]>;
    getSchema(schemaId?: string, serviceId?: string, requestPath?: string, schemaName?: string, autoSelectSingle?: boolean): Promise<IMrsSchemaData>;
    deleteSchema(schemaId: string, serviceId: string): Promise<void>;
    addSchema(serviceId: string, schemaName: string, requestPath: string, requiresAuth: boolean, options: IShellDictionary | null, itemsPerPage: number | null, comments?: string): Promise<string>;
    updateSchema(schemaId: string, serviceId: string, schemaName: string, requestPath: string, requiresAuth: boolean, enabled: boolean, itemsPerPage: number | null, comments: string, options: IShellDictionary | null): Promise<void>;
    addDbObject(dbObjectName: string, dbObjectType: string, autoAddSchema: boolean, requestPath: string, enabled: boolean, crudOperations: string[], crudOperationFormat: string, requiresAuth: boolean, rowUserOwnershipEnforced: boolean, autoDetectMediaType: boolean, options: IShellDictionary | null, itemsPerPage: number | null, rowUserOwnershipColumn?: string, schemaId?: string, schemaName?: string, comments?: string, mediaType?: string, authStoredProcedure?: string, objects?: IMrsObject[]): Promise<string>;
    updateDbObject(dbObjectId: string, dbObjectName: string, requestPath: string, schemaId: string, value: IShellMrsUpdateDbObjectKwargsValue): Promise<void>;
    listDbObjects(schemaId: string): Promise<IMrsDbObjectData[]>;
    deleteDbObject(dbObjectId: string): Promise<void>;
    addContentSet(contentDir: string, requestPath: string, requiresAuth: boolean, options: IShellDictionary | null, serviceId?: string, comments?: string, enabled?: boolean, replaceExisting?: boolean, progress?: (message: string) => void): Promise<IMrsAddContentSetData>;
    getServiceRequestPathAvailability(serviceId: string, requestPath: string): Promise<boolean>;
    listContentSets(serviceId: string, requestPath?: string): Promise<IMrsContentSetData[]>;
    listContentFiles(contentSetId: string, includeEnableState?: boolean): Promise<IMrsContentFileData[]>;
    deleteContentSet(contentSetId: string): Promise<void>;
    private get moduleSessionId();
    dumpSchema(path: string, serviceId?: string | undefined, serviceName?: string | undefined, schemaId?: string | undefined, schemaName?: string | undefined): Promise<void>;
    dumpObject(path: string, serviceId?: string | undefined, serviceName?: string | undefined, schemaId?: string | undefined, schemaName?: string | undefined, objectId?: string | undefined, objectName?: string | undefined): Promise<void>;
    loadSchema(path: string, serviceId?: string | undefined, serviceName?: string | undefined): Promise<void>;
    loadObject(path: string, serviceId?: string | undefined, serviceName?: string | undefined, schemaId?: string | undefined, schemaName?: string | undefined): Promise<void>;
    listRoles(serviceId?: string): Promise<IMrsRoleData[]>;
    listUserRoles(userId: string): Promise<IMrsUserRoleData[]>;
    listRouterIds(seenWithin?: number): Promise<number[]>;
    listRouters(activeWhenSeenWithin?: number): Promise<IMrsRouterData[]>;
    deleteRouter(routerId: number): Promise<void>;
    getSdkBaseClasses(sdkLanguage?: string, prepareForRuntime?: boolean): Promise<string>;
    getSdkServiceClasses(serviceId?: string, sdkLanguage?: string, prepareForRuntime?: boolean, serviceUrl?: string): Promise<string>;
    getRuntimeManagementCode(): Promise<string>;
    dumpSdkServiceFiles(serviceId: string, sdkLanguage: string, directory: string): Promise<boolean>;
    getTableColumnsWithReferences(requestPath?: string, dbObjectName?: string, dbObjectId?: string, schemaId?: string, schemaName?: string, dbObjectType?: string): Promise<IMrsTableColumnWithReference[]>;
    getDbObjectParameters(dbObjectName?: string, dbSchemaName?: string, dbObjectId?: string): Promise<IMrsDbObjectParameterData[]>;
    getDbObject(dbObjectId?: string, schemaId?: string, schemaName?: string, absoluteRequestPath?: string): Promise<IMrsDbObjectData>;
    getObjects(dbObjectId?: string): Promise<IMrsObject[]>;
    getObjectFieldsWithReferences(objectId?: string): Promise<IMrsObjectFieldWithReference[]>;
}
